{"ast":null,"code":"var _jsxFileName = \"/Users/plingard/weather-hooks/src/Weather.js\";\nimport React from 'react';\n\nconst Weather = ({\n  description,\n  city,\n  country,\n  error,\n  temperature\n}) => {\n  function matchValues() {\n    if (description) {\n      const weatherDescription = description.split(' ');\n      const keyWords = ['cloudy', 'clouds', 'cloud', 'overcast'];\n\n      for (let i = 0; i < weatherDescription.length; i++) {\n        if (keyWords.includes(weatherDescription[i])) {\n          return /*#__PURE__*/React.createElement(\"img\", {\n            src: \"https://media.freestocktextures.com/cache/74/8b/748ba3fe5976d8b03219a64851d2790d.jpg\",\n            alt: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 11,\n              columnNumber: 24\n            }\n          });\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, city && country && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 33\n    }\n  }, city, \", \", country), temperature && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 29\n    }\n  }, temperature, \" \\xB0F\"), description && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 29\n    }\n  }, \" Conditions: \", description), error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 23\n    }\n  }, error), description && matchValues());\n};\n\nexport default Weather; // Using && ensures API has been passed through before returning data","map":{"version":3,"sources":["/Users/plingard/weather-hooks/src/Weather.js"],"names":["React","Weather","description","city","country","error","temperature","matchValues","weatherDescription","split","keyWords","i","length","includes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA,WAAD;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,OAApB;AAA6BC,EAAAA,KAA7B;AAAoCC,EAAAA;AAApC,CAAD,KAAuD;AAEnE,WAASC,WAAT,GAAwB;AACxB,QAAIL,WAAJ,EAAgB;AACZ,YAAMM,kBAAkB,GAAGN,WAAW,CAACO,KAAZ,CAAkB,GAAlB,CAA3B;AACA,YAAMC,QAAQ,GAAG,CAAC,QAAD,EAAU,QAAV,EAAmB,OAAnB,EAA2B,UAA3B,CAAjB;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,kBAAkB,CAACI,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,YAAGD,QAAQ,CAACG,QAAT,CAAkBL,kBAAkB,CAACG,CAAD,CAApC,CAAH,EAA4C;AACxC,8BAAO;AAAK,YAAA,GAAG,EAAC,sFAAT;AAAgG,YAAA,GAAG,EAAC,EAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ;AACJ;AAAC;;AAEF,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,IAAI,IAAIC,OAAR,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,IAAJ,QAAYC,OAAZ,CADxB,EAEKE,WAAW,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,WAAJ,WAFpB,EAGKJ,WAAW,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiBA,WAAjB,CAHpB,EAIKG,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CAJd,EAKKH,WAAW,IAAIK,WAAW,EAL/B,CADJ;AASH,CAtBD;;AAwBA,eAAeN,OAAf,C,CACA","sourcesContent":["import React from 'react'\n\nconst Weather = ({description, city, country, error, temperature }) => {\n    \n    function matchValues () {\n    if (description){\n        const weatherDescription = description.split(' ')\n        const keyWords = ['cloudy','clouds','cloud','overcast']\n        for (let i=0; i < weatherDescription.length; i++) {\n            if(keyWords.includes(weatherDescription[i])){\n                return <img src='https://media.freestocktextures.com/cache/74/8b/748ba3fe5976d8b03219a64851d2790d.jpg' alt=\"\"/>\n            }\n        }\n    }}\n\n    return  (\n        <div>\n            {city && country && <p>{city}, {country}</p>}\n            {temperature && <p>{temperature} Â°F</p>}\n            {description && <p> Conditions: {description}</p>}\n            {error && <p>{error}</p>}\n            {description && matchValues()}\n        </div>\n    )\n}\n\nexport default Weather;\n// Using && ensures API has been passed through before returning data\n"]},"metadata":{},"sourceType":"module"}