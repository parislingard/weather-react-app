{"ast":null,"code":"var _jsxFileName = \"/Users/plingard/weather-hooks/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Weather from './Weather';\n\nfunction App() {\n  const [weather, setWeather] = useState([]);\n  const APIKEY = 'e76d36361a59d72f618a2450c26d53fb'; // Set up Hooks in React with useState\n\n  async function fetchData(e) {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n    const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`).then(res => res.json()).then(data => data);\n\n    if (city && country) {\n      setWeather({\n        data: apiData,\n        city: apiData.city,\n        country: apiData.sys.country,\n        description: apiData.weather[0].description,\n        temperature: Math.round(apiData.main.temp * 9 / 5 - 459.67),\n        //Kelvin to Fahrenheit\n        error: \"\"\n      });\n    } else {\n      setWeather({\n        data: '',\n        city: '',\n        country: '',\n        description: '',\n        temperature: '',\n        error: \"Please type in a city and country\"\n      });\n    }\n  } //Asynchronous function to retrieve weather data from\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"What's the Weather?\"), /*#__PURE__*/React.createElement(Form, {\n    getWeather: fetchData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Weather, {\n    city: weather.city,\n    country: weather.country,\n    description: weather.description,\n    temperature: weather.temperature,\n    error: weather.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), console.log(weather.data));\n} //Hooks up fetch function to form then returns result\n\n\nexport default App;","map":{"version":3,"sources":["/Users/plingard/weather-hooks/src/App.js"],"names":["React","useState","Form","Weather","App","weather","setWeather","APIKEY","fetchData","e","city","target","elements","value","country","preventDefault","apiData","fetch","then","res","json","data","sys","description","temperature","Math","round","main","temp","error","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBL,QAAQ,CAAC,EAAD,CAArC;AACA,QAAMM,MAAM,GAAG,kCAAf,CAFa,CAGb;;AAEA,iBAAeC,SAAf,CAAyBC,CAAzB,EAA4B;AAC1B,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC;AACA,UAAMC,OAAO,GAAGL,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBE,OAAlB,CAA0BD,KAA1C;AACEJ,IAAAA,CAAC,CAACM,cAAF;AACF,UAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,qDAAoDP,IAAK,IAAGI,OAAQ,UAASP,MAAO,EAAtF,CAAL,CACrBW,IADqB,CAChBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADS,EAErBF,IAFqB,CAEhBG,IAAI,IAAIA,IAFQ,CAAtB;;AAGA,QAAGX,IAAI,IAAII,OAAX,EAAmB;AACnBR,MAAAA,UAAU,CAAC;AACTe,QAAAA,IAAI,EAAEL,OADG;AAETN,QAAAA,IAAI,EAAEM,OAAO,CAACN,IAFL;AAGTI,QAAAA,OAAO,EAAEE,OAAO,CAACM,GAAR,CAAYR,OAHZ;AAITS,QAAAA,WAAW,EAAEP,OAAO,CAACX,OAAR,CAAgB,CAAhB,EAAmBkB,WAJvB;AAKTC,QAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWV,OAAO,CAACW,IAAR,CAAaC,IAAb,GAAoB,CAApB,GAAsB,CAAtB,GAA0B,MAArC,CALJ;AAKiD;AAC1DC,QAAAA,KAAK,EAAC;AANG,OAAD,CAAV;AAQE,KATF,MASQ;AACNvB,MAAAA,UAAU,CAAC;AACTe,QAAAA,IAAI,EAAE,EADG;AAETX,QAAAA,IAAI,EAAE,EAFG;AAGTI,QAAAA,OAAO,EAAE,EAHA;AAITS,QAAAA,WAAW,EAAE,EAJJ;AAKTC,QAAAA,WAAW,EAAE,EALJ;AAMTK,QAAAA,KAAK,EAAC;AANG,OAAD,CAAV;AAQE;AACL,GA/BY,CAgCb;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAErB,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,OAAD;AACA,IAAA,IAAI,EAAEH,OAAO,CAACK,IADd;AAEA,IAAA,OAAO,EAAEL,OAAO,CAACS,OAFjB;AAGA,IAAA,WAAW,EAAET,OAAO,CAACkB,WAHrB;AAIA,IAAA,WAAW,EAAElB,OAAO,CAACmB,WAJrB;AAKA,IAAA,KAAK,EAAEnB,OAAO,CAACwB,KALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAUGC,OAAO,CAACC,GAAR,CAAY1B,OAAO,CAACgB,IAApB,CAVH,CADF;AAcD,C,CACD;;;AACA,eAAejB,GAAf","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Weather from './Weather';\n\nfunction App() {\n  const [weather,setWeather] = useState([])\n  const APIKEY = 'e76d36361a59d72f618a2450c26d53fb'\n  // Set up Hooks in React with useState\n\n  async function fetchData(e) {\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n      e.preventDefault()\n    const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`)\n    .then(res => res.json())\n    .then(data => data)\n    if(city && country){\n    setWeather({\n      data: apiData,\n      city: apiData.city,\n      country: apiData.sys.country,\n      description: apiData.weather[0].description,\n      temperature: Math.round(apiData.main.temp * 9/5 - 459.67),//Kelvin to Fahrenheit\n      error:\"\"\n    }\n    )} else {\n      setWeather({\n        data: '',\n        city: '',\n        country: '',\n        description: '',\n        temperature: '',\n        error:\"Please type in a city and country\"\n      }\n      )}\n  }\n  //Asynchronous function to retrieve weather data from\n\n  return (\n    <div className=\"App\">\n      <h3>What's the Weather?</h3>\n      <Form getWeather={fetchData} />\n      <Weather\n      city={weather.city}\n      country={weather.country}\n      description={weather.description}\n      temperature={weather.temperature}\n      error={weather.error}\n      />\n      {console.log(weather.data)}\n    </div>\n  );\n}\n//Hooks up fetch function to form then returns result\nexport default App;\n"]},"metadata":{},"sourceType":"module"}